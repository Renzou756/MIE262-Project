reset;

printf("Start...\n\n");

model project.mod;

printf("Loaded model...\n\n");

data project.dat;

printf("Loaded data...\n\n");

option solver gurobi;

solve;

printf("Solving...\n\n");


for{k in K}{
	printf(k);	
	printf("\n");
}

# Demand constraint
printf("Checking demand constraint\n");
for {i in I}{
	if (co2[i].slack ==0) then
		printf("Shoe type %s is binding\n"), i;
}
# Warehouse Capacaity
printf("Check warehouse constraints\n");
for {w in W}{
	if  (co1[w].slack == 0) then
		printf("Warehouse %s is binding\n"), w;
}
# Machine Time constraints
printf("Checking Machine time constraints\n");
for {j in J}{
	if (co3[j].slack == 0) then
		printf("Machine %s is binding\n"), j;
}
# Budget constraint
printf("Check budget constraint\n");
if (co4.slack == 0) then
	printf("Budget is binding\n");
# Material Constraint
printf("Checking material constraint\n");
for {k in K}{
	if (co5[k].slack == 0) then
		printf("Raw material %s is binding\n"), k;
}
	
#for {w in W}{
#	print(sum{i in I} x[i,w]);
#}

display profit, x, y, x.rc, co1.dual, co2.dual, co3.dual, co4.dual, co5.dual, co1.slack, co2.slack, co3.slack, co4.slack, co5.slack > project.out;
close project.out;